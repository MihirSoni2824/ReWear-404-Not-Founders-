// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  location    String
  points      Int      @default(100)
  profilePic  String?
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       Item[]
  swapsAsUser1 Swap[]  @relation("User1Swaps")
  swapsAsUser2 Swap[]  @relation("User2Swaps")
  pointsTransactions PointsTransaction[]

  @@map("users")
}

model Item {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String   @db.Text
  images      Json     // Array of image URLs
  category    String
  size        String
  condition   ItemCondition
  status      ItemStatus @default(AVAILABLE)
  points      Int
  tags        Json     // Array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  swapsAsItem1 Swap[]  @relation("Item1Swaps")
  swapsAsItem2 Swap[]  @relation("Item2Swaps")

  @@map("items")
}

model Swap {
  id          String   @id @default(uuid())
  itemId1     String
  itemId2     String
  userId1     String
  userId2     String
  status      SwapStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  item1       Item     @relation("Item1Swaps", fields: [itemId1], references: [id], onDelete: Cascade)
  item2       Item     @relation("Item2Swaps", fields: [itemId2], references: [id], onDelete: Cascade)
  user1       User     @relation("User1Swaps", fields: [userId1], references: [id], onDelete: Cascade)
  user2       User     @relation("User2Swaps", fields: [userId2], references: [id], onDelete: Cascade)

  @@map("swaps")
}

model PointsTransaction {
  id          String   @id @default(uuid())
  userId      String
  amount      Int
  type        TransactionType
  reason      String
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("points_transactions")
}

enum ItemCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum ItemStatus {
  AVAILABLE
  PENDING
  SWAPPED
}

enum SwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
}

enum TransactionType {
  EARN
  SPEND
}
